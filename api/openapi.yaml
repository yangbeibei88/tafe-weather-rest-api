openapi: "3.0.3"
info:
  title: TAFE Weather API
  version: "1.0.0"
  description: "RESTful API to read, write, update and delete weather data."
tags:
  - name: weathers
    description: weather readings
  - name: users
    description: users information
  - name: logs
    description: deleted weather readings
paths:
  /api/v1/login:
    post:
      summary: User login
      description: Accepts user credentials (email and password) and returns a JWT token for authentication.
      operationId: login
      requestBody:
        $ref: "#/components/requestBodies/LoginInput"
      responses:
        "200":
          description: OK
  /api/v1/weathers/:
    get:
      tags:
        - weathers
      summary: List weather readings for all stations
      description: Paginated all weather readings since '2021-01-01'
      security:
        - bearerAuth: []
      operationId: listAllWeathers
      parameters:
        - $ref: "#/components/parameters/limitQueryParam"
        - $ref: "#/components/parameters/pageQueryParam"
      responses:
        "200":
          description: A list of weather readings
          content:
            application/json:
              schema:
                type: object
                required:
                  - paging
                  - result
                properties:
                  paging:
                    type: object
                    properties:
                      totalCount:
                        type: integer
                        description: Total count of returned items
                      totalPages:
                        type: integer
                        description: Total pages of returned items
                      limit:
                        type: integer
                      currentPage:
                        type: integer
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Weather"

    post:
      tags:
        - weathers
      summary: Create a new weather reading
      security:
        - bearerAuth: []
      operationId: createNewWeather
      requestBody:
        $ref: "#/components/requestBodies/WeatherInput"
      responses:
        "201":
          description: A new weather reading is created successfully.
          $ref: "#/components/responses/WeatherDoc"
  /api/v1/weathers/{id}:
    get:
      tags:
        - weathers
      summary: Show a specific weather reading
      security:
        - bearerAuth: []
      operationId: showWeatherById
      parameters:
        - $ref: "#/components/parameters/weatherIdParam"
      responses:
        "200":
          $ref: "#/components/responses/WeatherDoc"
        "404":
          $ref: "#/components/responses/404NotFound"
    put:
      tags:
        - weathers
      summary: Update a specific weather reading
      security:
        - bearerAuth: []
      operationId: updateWeatherById
      parameters:
        - $ref: "#/components/parameters/weatherIdParam"
      requestBody:
        $ref: "#/components/requestBodies/WeatherInput"
      responses:
        "200":
          description: The weather reading is updated successfully.
          $ref: "#/components/responses/WeatherDoc"
    delete:
      tags:
        - weathers
      summary: Delete a weather reading by Id
      security:
        - bearerAuth: []
      operationId: deleteWeatherById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
  /api/v1/weathers/batch:
    post:
      tags:
        - weathers
      summary: Create multiple weather readings in batch
      security:
        - bearerAuth: []
      operationId: createNewWeathers
      requestBody:
        $ref: "#/components/requestBodies/WeatherBatchInput"
      responses:
        "201":
          description: Multiple weather readings are created successfully.
          $ref: "#/components/responses/BatchIds"
  /api/v1/weathers/devices/aggregate:
    get:
      tags:
        - weathers
      summary: List weather aggregation by device.
      security:
        - bearerAuth: []
      operationId: listWeatherAggregationByDevice
      parameters:
        - $ref: "#/components/parameters/aggFieldQueryParam"
        - $ref: "#/components/parameters/recentMonthsQueryParam"
        - $ref: "#/components/parameters/createdAtQueryParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
  /api/v1/weathers/devices/{deviceName}:
    get:
      tags:
        - weathers
      summary: Show weather readings by device.
      security:
        - bearerAuth: []
      operationId: listWeathersByDevice
      parameters:
        - $ref: "#/components/parameters/deviceNameParam"
        - $ref: "#/components/parameters/limitQueryParam"
        - $ref: "#/components/parameters/pageQueryParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - paging
                  - result
                properties:
                  paging:
                    type: object
                    properties:
                      totalCount:
                        type: integer
                        description: Total count of returned items
                      totalPages:
                        type: integer
                        description: Total pages of returned items
                      limit:
                        type: integer
                      currentPage:
                        type: integer
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Weather"
  /api/v1/weathers/devices/{deviceName}/aggregate:
    get:
      tags:
        - weathers
      summary: Show weather aggregation by device.
      security:
        - bearerAuth: []
      operationId: showWeatherAggregationByDevice
      parameters:
        - $ref: "#/components/parameters/deviceNameParam"
        - $ref: "#/components/parameters/aggFieldQueryParam"
        - $ref: "#/components/parameters/recentMonthsQueryParam"
        - $ref: "#/components/parameters/createdAtQueryParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
  /api/v1/users:
    get:
      tags:
        - users
      summary: List all users
      operationId: listAllUsers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
    post:
      tags:
        - users
      summary: Create a new user
      operationId: createNewUser
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "201":
          description: Created
  /api/v1/users/{id}:
    get:
      tags:
        - users
      summary: Show a specific user information by user ID
      operationId: showUserById
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          description: OK
        "404":
          $ref: "#/components/responses/404NotFound"
    put:
      tags:
        - users
      summary: Update a specific user information by user ID
      operationId: updateUserById
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/400BadRequest"
    delete:
      tags:
        - users
      summary: Delete a user by user ID
      operationId: deleteUserById
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "204":
          description: The user is deleted successfully.
        "404":
          $ref: "#/components/responses/404NotFound"
  /api/v1/users/{id}/updatePassword:
    patch:
      tags:
        - users
      summary: Update user password by user ID.
      security:
        - bearerAuth: []
      operationId: updateUserPasswordById
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      requestBody:
        $ref: "#/components/requestBodies/updatePasswordInput"
      responses:
        "200":
          description: Password updated successfully.
  /api/v1/users/batch:
    put:
      tags:
        - users
      summary: Update many users
      operationId: updateMultipleUsers
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/roleQueryParam"
        - $ref: "#/components/parameters/createdAtQueryParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  $ref: "#/components/schemas/RoleString"
      responses:
        "200":
          description: Batch update successfully.

    delete:
      tags:
        - users
      summary: Delete multiple users
      operationId: deleteMultipleUsers
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/roleQueryParam"
        - $ref: "#/components/parameters/lastLoggedInAtQueryParam"
      responses:
        "204":
          description: Users are deleted.
  /api/v1/users/roles:
    patch:
      tags:
        - users
      summary: Update roles for multiple users.
      operationId: updateUserRoles
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/roleQueryParam"
        - $ref: "#/components/parameters/createdAtQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/updateUserRolesInput"
      responses:
        "200":
          description: Roles updated successfully.
        "400":
          $ref: "#/components/responses/400BadRequest"
  /api/v1/logs:
    get:
      tags:
        - logs
      summary: List deleted weather readings
      security:
        - bearerAuth: []
      operationId: listDeletedWeathers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Weather"
                        - type: object
                          properties:
                            deletedAt:
                              type: string
                              format: date-time
components:
  schemas:
    UniqueId:
      type: string
      readOnly: true
      description: Unique identifer for each document in a collection
      x-internal: true
    Password:
      type: string
      minLength: 8
      maxLength: 50
      description: User password Input
      x-internal: true
    Weather:
      type: object
      required:
        - deviceName
        - precipitation
        - temperature
        - atmosphericPressure
        - maxWindSpeed
        - solarRadiation
        - vaporPressure
        - humidity
        - windDirection
      properties:
        _id:
          $ref: "#/components/schemas/UniqueId"
        deviceName:
          type: string
          minLength: 1
          maxLength: 50
          description: "Must be a string and is required, 1-50 characters"
        precipitation:
          type: number
          format: double
          description: "Must be a number, unit: mm/h"
        temperature:
          type: number
          format: double
          description: "Must be a number, unit: celsius degree"
        atmosphericPressure:
          type: number
          format: double
          description: "Must be a number, unit: kpa"
        maxWindSpeed:
          type: number
          format: double
          description: "Must be a number, unit: m/s"
        solarRadiation:
          type: number
          format: double
          description: "Must be a number, unit: w/m2"
        vaporPressure:
          type: number
          format: double
          description: "Must be a number, unit: kpa"
        humidity:
          type: number
          format: double
          description: "Must be a number, unit: %"
        windDirection:
          type: number
          format: double
          description: "Must be a number, unit: degree"
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: "The current timestamp when the document is created"
        createdBy:
          type: string
          readOnly: true
          description: "User ID refer to who created the document"
        lastModifiedAt:
          type: string
          format: date-time
          readOnly: true
          description: "The current timestamp when the document is updated"
        lastModifiedBy:
          type: string
          readOnly: true
          description: "User ID refer to who last modified the document"
    Email:
      type: string
      format: email
      minLength: 5
      maxLength: 200
      pattern: "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$"
      description: "Must be an email address, 5-200 characters"
      x-internal: true
    Role:
      oneOf:
        - $ref: "#/components/schemas/RoleString"
        - $ref: "#/components/schemas/RoleArray"
      x-internal: true
    RoleArray:
      type: array
      minItems: 1
      uniqueItems: true
      description: 'Array of user roles ["teacher", "student", "admin", "sensor"]'
      items:
        type: string
        enum:
          - teacher
          - student
          - admin
          - sensor
      x-internal: true
    RoleString:
      type: string
      description: 'A string containing any combination of the roles "teacher", "student", "admin", and "sensor", separated by commas.'
      pattern: "^((teacher|student|admin|sensor)(,(teacher|student|admin|sensor))*)?$"
      x-internal: true
    User:
      type: object
      required:
        - emailAddress
        - firstName
        - lastName
        - phone
        - role
        - status
      properties:
        _id:
          $ref: "#/components/schemas/UniqueId"
        emailAddress:
          $ref: "#/components/schemas/Email"
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          description: "Must be a string and required, 2-50 characters"
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          description: "Must be a string and required, 2-50 characters"
        phone:
          type: string
          pattern: "^0[2-478]\\d{8}$"
          description: "Phone number must be 10 digits without spaces and special charachters"
        role:
          type: array
          minItems: 1
          uniqueItems: true
          description: 'Exaustive combination of array of user roles ["teacher", "student", "admin", "sensor"]'
          items:
            type: string
            enum:
              - teacher
              - student
              - admin
              - sensor
            description: 'Each role must be one of "teacher", "student", "admin", or "sensor".'
        status:
          type: string
          enum:
            - active
            - inactive
          description: 'Status must be either "active" or "inactive".'
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: "Date when the user was created."
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: "Date when the user was last updated."
        passwordChangedAt:
          type: string
          format: date-time
          readOnly: true
          description: "Date when the user's password was last updated."
        lastLoggedInAt:
          type: string
          format: date-time
          readOnly: true
          description: "Date when the user last logged in."
    NewUser:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          required:
            - password
            - confirmPassword
          properties:
            password:
              $ref: "#/components/schemas/Password"
            confirmPassword:
              $ref: "#/components/schemas/Password"
    UpdatePassword:
      type: object
      required:
        - currentPassword
        - newPassword
        - confirmPassword
      properties:
        currentPassword:
          $ref: "#/components/schemas/Password"
        newPassword:
          $ref: "#/components/schemas/Password"
        confirmPassword:
          $ref: "#/components/schemas/Password"
      # x-internal: true
    Longitude:
      type: number
      format: double
      minimum: -180
      maximum: 180
      description: Longitude must be between -180 and 180 degrees
      example: 152.77891
      x-internal: true
    Latitude:
      type: number
      format: double
      minimum: -90
      maximum: 90
      description: Latitude must be between -90 and 90 degrees
      example: -26.95064
      x-internal: true
    Error:
      type: object
      required:
        - statusCode
        - errors
      properties:
        statusCode:
          type: integer
          description: "error code"
        errors:
          type: array
          items:
            type: object
            required:
              - message
            properties:
              message:
                type: string
              context:
                type: object
                additionalProperties: true
        path:
          type: string
  requestBodies:
    updateUserRolesInput:
      description: Update user roles
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Role"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/Role"
    updatePasswordInput:
      description: Update user password
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdatePassword"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/UpdatePassword"
    LoginInput:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - emailAddress
              - password
            properties:
              emailAddress:
                $ref: "#/components/schemas/Email"
              password:
                $ref: "#/components/schemas/Password"
          examples:
            loginExample:
              summary: User login example
              value: { "emailAddress": "test@test.io", "password": "Test#123" }
    WeatherInput:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Weather"
              - type: object
                required:
                  - longitude
                  - latitude
                properties:
                  longitude:
                    $ref: "#/components/schemas/Longitude"
                  latitude:
                    $ref: "#/components/schemas/Latitude"
        application/x-www-form-urlencoded:
          schema:
            allOf:
              - $ref: "#/components/schemas/Weather"
              - type: object
                required:
                  - longitude
                  - latitude
                properties:
                  longitude:
                    $ref: "#/components/schemas/Longitude"
                  latitude:
                    $ref: "#/components/schemas/Latitude"
    WeatherBatchInput:
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - $ref: "#/components/schemas/Weather"
                - type: object
                  required:
                    - longitude
                    - latitude
                  properties:
                    longitude:
                      $ref: "#/components/schemas/Longitude"
                    latitude:
                      $ref: "#/components/schemas/Latitude"
  parameters:
    limitQueryParam:
      name: limit
      in: query
      description: The maximum of results to return per page.
      schema:
        type: integer
        default: 10
        maximum: 50
    pageQueryParam:
      name: page
      in: query
      description: The page number of results
      schema:
        type: integer
        default: 1
    userIdParam:
      name: id
      in: path
      description: The id of a user to retrive
      required: true
      schema:
        type: string
    weatherIdParam:
      name: id
      in: path
      description: The id of a weather reading to retrive
      required: true
      schema:
        type: string
    deviceNameParam:
      name: deviceName
      in: path
      description: The deviceName of a weather reading to retrive
      required: true
      schema:
        type: string
        example: woodford_sensor
    longitudeParam:
      name: longitude
      in: path
      required: true
      description: A station's longitude
      schema:
        $ref: "#/components/schemas/Longitude"
    latitudeParam:
      name: latitude
      in: path
      required: true
      description: A station's latiitude
      schema:
        $ref: "#/components/schemas/Latitude"
    aggFieldQueryParam:
      name: aggField
      in: query
      required: true
      style: form
      explode: true
      description: aggregation field name
      schema:
        type: string
        enum:
          - precipitation
          - temperature
          - atmosphericPressure
          - maxWindSpeed
          - solarRadiation
          - vaporPressure
          - humidity
          - windDirection
        example: humidity
    recentMonthsQueryParam:
      name: recentMonths
      in: query
      style: form
      explode: true
      description: The number of recent months
      schema:
        type: integer
        minimum: 1
        default: 3
        example: 5
    createdAtQueryParam:
      name: createdAt
      in: query
      required: false
      style: deepObject
      explode: true
      description: Date range based on createdAt
      schema:
        type: object
        properties:
          gte:
            type: string
            example: "2020-12-07"
          lte:
            type: string
            example: "2021-05-07"
    lastLoggedInAtQueryParam:
      name: lastLoggedInAt
      in: query
      required: true
      style: deepObject
      explode: true
      description: Date range based on lastLoggedInAt
      schema:
        type: object
        properties:
          gte:
            type: string
          lte:
            type: string
    roleQueryParam:
      name: role
      in: query
      required: true
      style: form
      explode: true
      description: user role
      schema:
        $ref: "#/components/schemas/RoleString"
  responses:
    # 400
    400BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    # 401
    401Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    # 403
    403Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    # 404
    404NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    WeatherDoc:
      description: A weather reading document.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Weather"

    BatchIds:
      description: Multiple documents have been inserted or updated.
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                type: integer
                description: Total count of documents inserted or updated.
              data:
                type: object
                description: Ids of documents inserted or updated.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
