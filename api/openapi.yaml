openapi: "3.0.3"
info:
  title: TAFE Weather API
  version: "1.0.0"
  description: "RESTful API to read, write, update and delete weather data."
tags:
  - name: weathers
    description: weather readings
  - name: users
    description: users information
  - name: logs
    description: deleted weather readings
paths:
  /api/v1/login:
    post:
      summary: User login
      description: Accepts user credentials (email and password) and returns a JWT token for authentication.
      operationId: login
      requestBody:
        $ref: "#/components/requestBodies/LoginInput"
      responses:
        "200":
          description: OK
  /api/v1/weathers/:
    get:
      tags:
        - weathers
      summary: List weather reading for all stations
      security:
        - bearerAuth: []
      operationId: listAllWeathers
      parameters:
        - name: limit
          in: query
          description: The maximum of results to return per page.
          schema:
            type: integer
            default: 10
            maximum: 50
        - name: page
          in: query
          description: The page number of results
          schema:
            type: integer
            default: 1
      responses:
        "200":
          description: A list of weather readings
          content:
            application/json:
              schema:
                type: object
                required:
                  - paging
                  - result
                properties:
                  paging:
                    type: object
                    properties:
                      totalCount:
                        type: integer
                        description: Total count of returned items
                      totalPages:
                        type: integer
                        description: Total pages of returned items
                      limit:
                        type: integer
                      currentPage:
                        type: integer
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Weather"
    post:
      tags:
        - weathers
      summary: Create a new weather reading
      security:
        - bearerAuth: []
      operationId: createNewWeather
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WeatherRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WeatherRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WeatherResponse"
  /api/v1/weathers/{id}:
    get:
      tags:
        - weathers
      summary: Show a specific weather reading
      security:
        - bearerAuth: []
      operationId: showWeatherById
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the weather reading to retrive
          schema:
            type: string
      responses:
        "200":
          description: OK
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - weathers
      summary: Update a specific weather reading
      security:
        - bearerAuth: []
      operationId: updateWeatherById
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the weather reading to retrive
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WeatherRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WeatherRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WeatherResponse"
    delete:
      tags:
        - weathers
      summary: Delete a weather reading by Id
      security:
        - bearerAuth: []
      operationId: deleteWeatherById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
  /api/v1/weathers/batch:
    post:
      tags:
        - weathers
      summary: Create multiple weather readings in batch
      security:
        - bearerAuth: []
      operationId: createNewWeathers
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WeatherRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WeatherResponse"
  /api/v1/users:
    get:
      tags:
        - users
      summary: List all users
      operationId: listAllUsers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - users
      summary: Create a new user
      operationId: createNewUser
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
components:
  schemas:
    UniqueId:
      type: string
      readOnly: true
      description: Unique identifer for each document in a collection
    PasswordInput:
      type: string
      minLength: 8
      maxLength: 50
      description: User password
    Weather:
      type: object
      required:
        - deviceName
        - precipitation
        - temperature
        - atmosphericPressure
        - maxWindSpeed
        - solarRadiation
        - vaporPressure
        - humidity
        - windDirection
      properties:
        _id:
          $ref: "#/components/schemas/UniqueId"
        deviceName:
          type: string
          minLength: 1
          maxLength: 50
          description: "Must be a string and is required, 1-50 characters"
        precipitation:
          type: number
          format: double
          description: "Must be a number, unit: mm/h"
        temperature:
          type: number
          format: double
          description: "Must be a number, unit: celsius degree"
        atmosphericPressure:
          type: number
          format: double
          description: "Must be a number, unit: kpa"
        maxWindSpeed:
          type: number
          format: double
          description: "Must be a number, unit: m/s"
        solarRadiation:
          type: number
          format: double
          description: "Must be a number, unit: w/m2"
        vaporPressure:
          type: number
          format: double
          description: "Must be a number, unit: kpa"
        humidity:
          type: number
          format: double
          description: "Must be a number, unit: %"
        windDirection:
          type: number
          format: double
          description: "Must be a number, unit: degree"
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: "The current timestamp when the document is created"
        createdBy:
          type: string
          readOnly: true
          description: "User ID refer to who created the document"
        lastModifiedAt:
          type: string
          format: date-time
          readOnly: true
          description: "The current timestamp when the document is updated"
        lastModifiedBy:
          type: string
          readOnly: true
          description: "User ID refer to who last modified the document"
    Email:
      type: string
      format: email
      minLength: 5
      maxLength: 200
      pattern: "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$"
      description: "Must be an email address, 5-200 characters"
    User:
      type: object
      required:
        - emailAddress
        - firstName
        - lastName
        - phone
        - role
        - status
      properties:
        _id:
          $ref: "#/components/schemas/UniqueId"
        emailAddress:
          $ref: "#/components/schemas/Email"
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          description: "Must be a string and required, 2-50 characters"
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          description: "Must be a string and required, 2-50 characters"
        phone:
          type: string
          pattern: "^0[2-478]\\d{8}$"
          description: "Phone number must be 10 digits without spaces and special charachters"
        role:
          type: array
          minItems: 1
          uniqueItems: true
          additionalItems: false
          description: 'Exaustive combination of array of user roles ["teacher", "student", "admin", "sensor"]'
          items:
            type: string
            enum:
              - teacher
              - student
              - admin
              - sensor
            description: 'Each role must be one of "teacher", "student", "admin", or "sensor".'
        status:
          type: string
          enum:
            - active
            - inactive
          description: 'Status must be either "active" or "inactive".'
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: "Date when the user was created."
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          description: "Date when the user was last updated."
        passwordChangedAt:
          type: string
          format: date-time
          readOnly: true
          description: "Date when the user's password was last updated."
        lastLoggedInAt:
          type: string
          format: date-time
          readOnly: true
          description: "Date when the user last logged in."
    NewUser:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          required:
            - password
            - confirmPassword
          properties:
            password:
              $ref: "#/components/schemas/PasswordInput"
            confirmPassword:
              $ref: "#/components/schemas/PasswordInput"
    WeatherResponse:
      allOf:
        - $ref: "#/components/schemas/Weather"
        - type: object
          properties:
            geoLocation:
              $ref: "#/components/schemas/GeoLocationOutput"
    WeatherRequest:
      allOf:
        - $ref: "#/components/schemas/Weather"
        - type: object
          properties:
            longitude:
              $ref: "#/components/schemas/LongitudeInput"
            latitude:
              $ref: "#/components/schemas/LatitudeInput"
    GeoLocationOutput:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          enum:
            - Point
          type: string
        coordinates:
          type: array
          minItems: 2
          maxItems: 2
          prefixItems:
            - $ref: "#/components/schemas/LongitudeInput"
            - $ref: "#/components/schemas/LatitudeInput"
    LongitudeInput:
      type: number
      format: double
      minimum: -180
      maximum: 180
      description: Longitude must be between -180 and 180 degrees
    LatitudeInput:
      type: number
      format: double
      minimum: -90
      maximum: 90
      description: Latitude must be between -90 and 90 degrees
    Error:
      type: object
      required:
        - statusCode
        - errors
      properties:
        statusCode:
          type: integer
          description: "error code"
        errors:
          type: array
          items:
            type: object
            required:
              - message
            properties:
              message:
                type: string
              context:
                type: object
                additionalProperties: true
        path:
          type: string
  requestBodies:
    LoginInput:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - emailAddress
              - password
            properties:
              emailAddress:
                $ref: "#/components/schemas/Email"
              password:
                $ref: "#/components/schemas/PasswordInput"
  responses:
    # 400
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    # 401
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    # 403
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    # 404
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
