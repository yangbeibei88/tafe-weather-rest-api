openapi: "3.1.0"
info:
  title: TAFE Weather API
  version: "1.0.0"
  description: "RESTful API to read, write, update and delete weather data."
servers:
  - url: "http://localhost:3085"
tags:
  - name: weathers
    description: weather readings
  - name: users
    description: users information
  - name: logs
    description: deleted weather readings
  - name: account
    description: logged-in user account
paths:
  /api/v1:
    get:
      summary: Welcome to the API!
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Welcome to TAFE Weather REST API v1! Please login to continue.
  /api/v1/login:
    post:
      summary: User login
      description: Accepts user credentials (email and password) and returns a JWT token for authentication.
      operationId: login
      requestBody:
        $ref: "#/components/requestBodies/LoginInput"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "401":
          $ref: "#/components/responses/IncorrectCredentials"
  /api/v1/weathers:
    get:
      tags:
        - weathers
      summary: List weather readings for all stations
      description: Paginated all weather readings
      security:
        - bearerAuth: []
      operationId: listAllWeathers
      parameters:
        - $ref: "#/components/parameters/limitQueryParam"
        - $ref: "#/components/parameters/pageQueryParam"
        - $ref: "#/components/parameters/createdAtQueryParam"
      responses:
        "200":
          description: A list of weather readings
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Pagination"
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Weather"
        "400":
          $ref: "#/components/responses/InvalidQueryParams"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
    post:
      tags:
        - weathers
      summary: Create a new weather reading
      security:
        - bearerAuth: []
      operationId: createNewWeather
      requestBody:
        $ref: "#/components/requestBodies/WeatherInput"
      responses:
        "201":
          description: A new weather reading is created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/Weather"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500ServerError"
  /api/v1/weathers/{id}:
    get:
      tags:
        - weathers
      summary: Show a specific weather reading
      security:
        - bearerAuth: []
      operationId: showWeatherById
      parameters:
        - $ref: "#/components/parameters/weatherIdParam"
      responses:
        "200":
          description: A weather reading document
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/Weather"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerError"
    put:
      tags:
        - weathers
      summary: Update a specific weather reading
      security:
        - bearerAuth: []
      operationId: updateWeatherById
      parameters:
        - $ref: "#/components/parameters/weatherIdParam"
      requestBody:
        $ref: "#/components/requestBodies/WeatherInput"
      responses:
        "200":
          $ref: "#/components/responses/UpdatedResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
    delete:
      tags:
        - weathers
      summary: Delete a weather reading by Id
      security:
        - bearerAuth: []
      operationId: deleteWeatherById
      parameters:
        - $ref: "#/components/parameters/weatherIdParam"
      responses:
        "204":
          description: Deleted successfully
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
  /api/v1/weathers/batch:
    post:
      tags:
        - weathers
      summary: Create multiple weather readings in batch
      security:
        - bearerAuth: []
      operationId: createNewWeathers
      requestBody:
        $ref: "#/components/requestBodies/WeatherBatchInput"
      responses:
        "201":
          $ref: "#/components/responses/InsertedManyResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
  /api/v1/weathers/devices/aggregate:
    get:
      tags:
        - weathers
      summary: List weather aggregation of all devices.
      security:
        - bearerAuth: []
      operationId: listWeatherAggregationByDevice
      parameters:
        - $ref: "#/components/parameters/aggFieldQueryParam"
          example: temperature
        - $ref: "#/components/parameters/recentMonthsQueryParam"
        - $ref: "#/components/parameters/createdAtQueryParam"

      responses:
        "200":
          description: Aggregated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/AggregationResult"
              examples:
                aggregationExample:
                  $ref: "#/components/examples/aggregateResultAllDevices"
        "400":
          description: Invalid query params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                limitPageCreatedAt:
                  $ref: "#/components/examples/aggFieldCreatedAtRecentMonths"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
  /api/v1/weathers/devices/{deviceName}:
    get:
      tags:
        - weathers
      summary: Show weather readings by device.
      security:
        - bearerAuth: []
      operationId: listWeathersByDevice
      parameters:
        - $ref: "#/components/parameters/deviceNameParam"
        - $ref: "#/components/parameters/limitQueryParam"
        - $ref: "#/components/parameters/pageQueryParam"
        - $ref: "#/components/parameters/createdAtQueryParam"
      responses:
        "200":
          description: A list of weather readings by device
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Pagination"
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/Weather"
        "400":
          description: Invalid query params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                limitPageCreatedAt:
                  $ref: "#/components/examples/limitPageCreatedAt"

        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          description: Device not found
          $ref: "#/components/responses/404NotFound"
  /api/v1/weathers/devices/{deviceName}/aggregate:
    get:
      tags:
        - weathers
      summary: Show weather aggregation by device.
      security:
        - bearerAuth: []
      operationId: showWeatherAggregationByDevice
      parameters:
        - $ref: "#/components/parameters/deviceNameParam"
        - $ref: "#/components/parameters/aggFieldQueryParam"
          example: precipitation
        - $ref: "#/components/parameters/recentMonthsQueryParam"
        - $ref: "#/components/parameters/createdAtQueryParam"
      responses:
        "200":
          description: Aggregated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/AggregationResult"
              examples:
                aggregationExample:
                  $ref: "#/components/examples/aggregateResultByDevice"
        "400":
          description: Invalid query params
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                limitPageCreatedAt:
                  $ref: "#/components/examples/aggFieldCreatedAtRecentMonths"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          description: Device not found
          $ref: "#/components/responses/404NotFound"
  /api/v1/users:
    get:
      tags:
        - users
      summary: List all users
      operationId: listAllUsers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
    post:
      tags:
        - users
      summary: Create a new user
      operationId: createNewUser
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "201":
          description: Created
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
  /api/v1/users/{id}:
    get:
      tags:
        - users
      summary: Show a specific user information by user ID
      operationId: showUserById
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          description: OK
        "404":
          $ref: "#/components/responses/404NotFound"
    delete:
      tags:
        - users
      summary: Delete a user by user ID
      operationId: deleteUserById
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "204":
          description: The user is deleted successfully.
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
  /api/v1/account:
    get:
      tags:
        - account
      summary: User gets own account details
      security:
        - bearerAuth: []
      operationId: ShowUserAccount
      responses:
        "200":
          description: OK
    put:
      tags:
        - account
      summary: User updates own account details
      security:
        - bearerAuth: []
      operationId: updateUserAccount
      requestBody:
        $ref: "#/components/requestBodies/updateAccountInput"
      responses:
        "200":
          description: Account updated successfully.
  /api/v1/account/updatePassword:
    patch:
      tags:
        - account
      summary: User update account password.
      security:
        - bearerAuth: []
      operationId: updateUserPassword
      requestBody:
        $ref: "#/components/requestBodies/updatePasswordInput"
      responses:
        "200":
          description: Password updated successfully.
  /api/v1/users/roles/{role}:
    patch:
      tags:
        - users
      summary: Update roles for multiple users.
      operationId: updateUserRoles
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/roleParam"
        - $ref: "#/components/parameters/createdAtQueryParam"
      requestBody:
        $ref: "#/components/requestBodies/updateUserRolesInput"
      responses:
        "200":
          description: Roles updated successfully.
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
    delete:
      tags:
        - users
      summary: Delete multiple users based on last loggedIn date
      operationId: deleteMultipleUsers
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/roleParam"
        - $ref: "#/components/parameters/lastLoggedInAtQueryParam"
      responses:
        "204":
          description: Deleted successfully
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
  /api/v1/logs:
    get:
      tags:
        - logs
      summary: List deleted weather readings
      security:
        - bearerAuth: []
      operationId: listDeletedWeathers
      parameters:
        - $ref: "#/components/parameters/limitQueryParam"
        - $ref: "#/components/parameters/pageQueryParam"
        - $ref: "#/components/parameters/deletedAtQueryParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Pagination"
                type: object
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/Weather"
                        - type: object
                          properties:
                            deletedAt:
                              type: string
                              format: date-time
        "400":
          $ref: "#/components/responses/InvalidQueryParams"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
  /api/v1/logs/{id}:
    get:
      tags:
        - logs
      summary: Show a specific log by ID
      operationId: showLogById
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/logIdParam"
      responses:
        "200":
          description: A deleted weather document
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    allOf:
                      - $ref: "#/components/schemas/Weather"
                      - type: object
                        properties:
                          deletedAt:
                            type: string
                            format: date-time
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
    delete:
      tags:
        - logs
      summary: Delete a log by ID
      operationId: deleteLogById
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/logIdParam"
      responses:
        "204":
          description: Deleted successfully
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"
  /api/v1/logs/batch:
    delete:
      tags:
        - logs
      summary: Delete multiple logs
      operationId: deleteMultipleLogs
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/deletedAtQueryParam"
      responses:
        "204":
          description: Deleted successfully
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "404":
          $ref: "#/components/responses/404NotFound"

components:
  schemas:
    UniqueId:
      type: string
      readOnly: true
      description: Unique identifer for each document in a collection
      x-internal: true
    Password:
      type: string
      format: password
      writeOnly: true
      minLength: 8
      maxLength: 50
      description: "Password must be 8 - 50 characters, containing uppercase(s),lowercase(s), number(s), and special character(s)."
      example: Asgard2388!
      x-internal: true
    Weather:
      type: object
      required:
        - deviceName
        - longitude
        - latiitude
        - precipitation
        - temperature
        - atmosphericPressure
        - maxWindSpeed
        - solarRadiation
        - vaporPressure
        - humidity
        - windDirection
      properties:
        _id:
          $ref: "#/components/schemas/UniqueId"
        deviceName:
          type: string
          minLength: 1
          maxLength: 50
          description: "Must be a string and is required, 1-50 characters"
          example: woodford_sensor
        longitude:
          $ref: "#/components/schemas/Longitude"
        latitude:
          $ref: "#/components/schemas/Latitude"
        precipitation:
          type: number
          format: double
          description: "Must be a number, unit: mm/h"
          example: 0.085
        temperature:
          type: number
          format: double
          description: "Must be a number, unit: celsius degree"
          example: 24.05
        atmosphericPressure:
          type: number
          format: double
          description: "Must be a number, unit: kpa"
          example: 128.01
        maxWindSpeed:
          type: number
          format: double
          description: "Must be a number, unit: m/s"
          example: 3.82
        solarRadiation:
          type: number
          format: double
          description: "Must be a number, unit: w/m2"
          example: 380.56
        vaporPressure:
          type: number
          format: double
          description: "Must be a number, unit: kpa"
          example: 1.88
        humidity:
          type: number
          format: double
          description: "Must be a number, unit: %"
          example: 73.22
        windDirection:
          type: number
          format: double
          description: "Must be a number, unit: degree"
          example: 162.82
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: "The current timestamp when the document is created"
        createdBy:
          type: string
          readOnly: true
          description: "User ID refer to who created the document"
        lastModifiedAt:
          type: string
          format: date-time
          readOnly: true
          description: "The current timestamp when the document is updated"
        lastModifiedBy:
          type: string
          readOnly: true
          description: "User ID refer to who last modified the document"
    Email:
      type: string
      format: email
      minLength: 5
      maxLength: 200
      pattern: "^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$"
      description: "Must be an email address, 5-200 characters"
      x-internal: true
    Role:
      oneOf:
        - $ref: "#/components/schemas/RoleString"
        - $ref: "#/components/schemas/RoleArray"
      # x-internal: true
    RoleArray:
      type: array
      minItems: 1
      uniqueItems: true
      description: 'Array of user roles ["teacher", "student", "admin", "sensor", "test"]'
      items:
        type: string
        enum:
          - student
          - sensor
          - teacher
          - admin
          - test
      x-internal: true
    RoleString:
      type: string
      description: 'A string containing any combination of the roles "teacher", "student", "admin", and "sensor", "test" separated by commas.'
      pattern: "^((teacher|student|admin|sensor|test)(,(teacher|student|admin|sensor|test))*)?$"
      x-internal: true
    Pagination:
      type: object
      properties:
        paging:
          type: object
          properties:
            totalCount:
              type: integer
              description: Total count of returned items
              example: 1000
            totalPages:
              type: integer
              description: Total pages of returned items
              example: 100
            limit:
              type: integer
              example: 10
            currentPage:
              type: integer
              example: 1
      x-internal: true
    AggregationResult:
      type: object
      description: Aggregation Result
      properties:
        deviceName:
          type: string
      additionalProperties:
        type: object
        properties:
          max:
            type: object
            properties:
              value:
                type: number
                format: double
              createdAt:
                type: string
                format: date-time
              deviceName:
                type: string
          min:
            type: object
            properties:
              value:
                type: number
                format: double
              createdAt:
                type: string
                format: date-time
              deviceName:
                type: string
          avg:
            type: object
            properties:
              value:
                type: number
                format: double
          median:
            type: object
            properties:
              value:
                type: number
                format: double
      x-internal: true
    Account:
      type: object
      description: User account updatable fields
      required:
        - firstName
        - lastName
        - phone
      properties:
        firstName:
          type: string
          minLength: 2
          maxLength: 50
          description: "Must be a string and required, 2-50 characters"
          example: "John"
        lastName:
          type: string
          minLength: 2
          maxLength: 50
          description: "Must be a string and required, 2-50 characters"
          example: "Doe"
        phone:
          type: string
          pattern: "^0[2-478]\\d{8}$"
          description: "Phone number must be 10 digits without spaces and special charachters"
    User:
      allOf:
        - $ref: "#/components/schemas/Account"
        - type: object
          required:
            - emailAddress
            - role
            - status
          properties:
            _id:
              $ref: "#/components/schemas/UniqueId"
            emailAddress:
              $ref: "#/components/schemas/Email"
            role:
              type: array
              minItems: 1
              uniqueItems: true
              description: 'Exaustive combination of array of user roles ["teacher", "student", "admin", "sensor", "test"]'
              items:
                type: string
                enum:
                  - teacher
                  - student
                  - admin
                  - sensor
                  - test
                description: 'Each role must be one of "teacher", "student", "admin", or "sensor" or "test".'
            status:
              type: string
              enum:
                - active
                - inactive
              description: 'Status must be either "active" or "inactive".'
            createdAt:
              type: string
              format: date-time
              readOnly: true
              description: "Date when the user was created."
            updatedAt:
              type: string
              format: date-time
              readOnly: true
              description: "Date when the user was last updated."
            passwordChangedAt:
              type: string
              format: date-time
              readOnly: true
              description: "Date when the user's password was last updated."
            lastLoggedInAt:
              type: string
              format: date-time
              readOnly: true
              description: "Date when the user last logged in."
    NewUser:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          required:
            - password
            - confirmPassword
          properties:
            password:
              $ref: "#/components/schemas/Password"
            confirmPassword:
              $ref: "#/components/schemas/Password"
    UpdatePassword:
      type: object

      required:
        - currentPassword
        - newPassword
        - confirmNewPassword
      properties:
        currentPassword:
          $ref: "#/components/schemas/Password"
        newPassword:
          $ref: "#/components/schemas/Password"
        confirmNewPassword:
          $ref: "#/components/schemas/Password"
      # x-internal: true
    Longitude:
      type: number
      format: double
      minimum: -180
      maximum: 180
      description: Longitude must be between -180 and 180 degrees
      example: 152.77891
      x-internal: true
    Latitude:
      type: number
      format: double
      minimum: -90
      maximum: 90
      description: Latitude must be between -90 and 90 degrees
      example: -26.95064
      x-internal: true
    Error:
      type: object
      required:
        - statusCode
        - errors
      properties:
        statusCode:
          type: integer
          enum: [400, 401, 403, 404, 500]
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              context:
                type: object
                additionalProperties: true
        path:
          type: string
  requestBodies:
    updateAccountInput:
      description: Update user account details
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Account"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/Account"
    updateUserRolesInput:
      description: Update user roles
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - role
            properties:
              role:
                $ref: "#/components/schemas/RoleArray"
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              role:
                $ref: "#/components/schemas/RoleArray"
    updatePasswordInput:
      description: Update user password
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UpdatePassword"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/UpdatePassword"
    LoginInput:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - emailAddress
              - password
            properties:
              emailAddress:
                $ref: "#/components/schemas/Email"
              password:
                $ref: "#/components/schemas/Password"
          examples:
            loginExample:
              summary: User login example
              value:
                { "emailAddress": "test@test.io", "password": "GoodFriday123!" }
    WeatherInput:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Weather"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/Weather"
    WeatherBatchInput:
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Weather"
          examples:
            batchWeatherInput:
              $ref: "#/components/examples/batchWeatherInput"
  parameters:
    limitQueryParam:
      name: limit
      in: query
      description: The maximum of results to return per page.
      schema:
        type: integer
        default: 10
        maximum: 50
    pageQueryParam:
      name: page
      in: query
      description: The page number of results
      schema:
        type: integer
        default: 1
    userIdParam:
      name: id
      in: path
      description: User ID
      example: 67375be3cc06399e890dc717
      required: true
      schema:
        type: string
    weatherIdParam:
      name: id
      in: path
      description: The id of a weather reading to retrive
      example: 67422e388471694b9f359d25
      required: true
      schema:
        type: string
    logIdParam:
      name: id
      in: path
      description: The id of a log to retrive
      example: 67574734d5d090c580891c81
      required: true
      schema:
        type: string
    deviceNameParam:
      name: deviceName
      in: path
      description: The deviceName of a weather reading to retrive
      required: true
      schema:
        type: string
        example: woodford_sensor
    roleParam:
      name: role
      in: path
      description: Role name of a user
      required: true
      schema:
        type: string
        enum:
          - student
          - sensor
          - teacher
          - admin
          - test
        example: student
    longitudeParam:
      name: longitude
      in: path
      required: true
      description: A station's longitude
      schema:
        $ref: "#/components/schemas/Longitude"
    latitudeParam:
      name: latitude
      in: path
      required: true
      description: A station's latiitude
      schema:
        $ref: "#/components/schemas/Latitude"
    aggFieldQueryParam:
      name: aggField
      in: query
      required: true
      style: form
      explode: true
      description: aggregation field name
      schema:
        type: string
        enum:
          - precipitation
          - temperature
          - atmosphericPressure
          - maxWindSpeed
          - solarRadiation
          - vaporPressure
          - humidity
          - windDirection
        # example: precipitation
    recentMonthsQueryParam:
      name: recentMonths
      in: query
      style: form
      explode: true
      description: The number of recent months
      schema:
        type: integer
        minimum: 1
        default: 3
        example: 5
    createdAtQueryParam:
      name: createdAt
      in: query
      required: false
      style: deepObject
      explode: true
      description: Date range based on createdAt
      schema:
        type: object
        properties:
          gte:
            type: string
            example: "2020-12-07"
          lte:
            type: string
            example: "2021-05-07"
    deletedAtQueryParam:
      name: deletedAt
      in: query
      required: false
      style: deepObject
      explode: true
      description: Date range based on deletedAt
      schema:
        type: object
        properties:
          gte:
            type: string
            example: "2024-12-01"
          lte:
            type: string
            example: "2024-12-31"
    lastLoggedInAtQueryParam:
      name: lastLoggedInAt
      in: query
      required: true
      style: deepObject
      explode: true
      description: Date range based on lastLoggedInAt
      schema:
        type: object
        properties:
          gte:
            type: string
            example: "2024-11-01"
          lte:
            type: string
            example: "2024-12-31"
    roleQueryParam:
      name: role
      in: query
      required: true
      style: form
      explode: true
      description: user role
      schema:
        $ref: "#/components/schemas/RoleString"
  responses:
    # Validation Error
    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            statusCode: 400
            errors:
              - message: "Validation Error"
                context: {}
    # Invalid Query Params
    InvalidQueryParams:
      description: Invalid Query Params
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            statusCode: 400
            errors:
              - message: "Invalid query params"
                context:
                  {
                    "invalidParams": ["firstName", "lastName"],
                    "allowedParams": ["createdAt"],
                  }
    # 400
    400BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            statusCode: 400
            errors:
              - message: "Bad request."
                context: {}

    IncorrectCredentials:
      description: Incorrect Credentials
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            statusCode: 401
            errors:
              - message: "Incorrect Credentials"
                context: {}
    # 401
    401Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            statusCode: 401
            errors:
              - message: "Please login to get access."
                context: {}
    # 403
    403Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            statusCode: 403
            errors:
              - message: "You are not authorised to perform this action."
                context: {}
    # 404
    404NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            statusCode: 404
            errors:
              - message: "This document is not found."
                context: {}
    # 500
    500ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            statusCode: 500
            errors:
              - message: "Internal Server Error"
                context: {}
    WeatherDoc:
      description: A weather reading document.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Weather"
    UpdatedResponse:
      description: Updated successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                type: object
                properties:
                  matchedCount:
                    type: integer
                    example: 1
                  modifiedCount:
                    type: integer
                    example: 1

    InsertedManyResponse:
      description: Multiple documents inserted
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                type: object
                properties:
                  insertedCount:
                    type: integer
                    example: 2
                  insertedIds:
                    type: array
                    items:
                      type: string
                    example:
                      ["67422e388471694b9f359d3b", "67422e388471694b9f359d43"]
  examples:
    limitPageCreatedAt:
      summary: "allowedParams: limit_page_createdAt"
      value:
        statusCode: 400
        errors:
          - message: Invalid query params
            context:
              invalidParams: ["firstName", "lastName"]
              allowedParams: ["limit", "page", "createdAt"]
    aggFieldCreatedAtRecentMonths:
      summary: "allowedParams: aggField_createdAt_recentMonths"
      value:
        statusCode: 400
        errors:
          - message: Invalid query params
            context:
              invalidParams: ["firstName", "lastName"]
              allowedParams: ["aggField", "createdAt", "recentMonths"]
    aggregateResultByDevice:
      summary: Aggregation result by device
      value:
        result:
          - deviceName: "woodford_sensor"
            precipitation:
              max:
                value: 8.126
                createdAt: "2021-01-14T08:46:49.000Z"
                deviceName: "woodford_sensor"
              min:
                value: 0
                createdAt: "2020-12-07T03:47:42.000Z"
                deviceName: "woodford_sensor"
              avg:
                value: 0.025269191017570233
              median:
                value: 0
    aggregateResultAllDevices:
      summary: Aggregation result of all devices
      value:
        result:
          - deviceName: "woodford_sensor"
            temperature:
              max:
                value: 40.19
                createdAt: "2021-01-26T04:06:31.000Z"
                deviceName: "woodford_sensor"
              min:
                value: 10.05
                createdAt: "2021-04-11T19:34:36.000Z"
                deviceName: "woodford_sensor"
              avg:
                value: 22.68977120037585
              median:
                value: 22.52
          - deviceName: "noosa_sensor"
            temperature:
              max:
                value: 33.49
                createdAt: "2021-01-26T04:06:31.000Z"
                deviceName: "noosa_sensor"
              min:
                value: 8.37
                createdAt: "2021-04-11T19:34:36.000Z"
                deviceName: "noosa_sensor"
              avg:
                value: 18.90806812309138
              median:
                value: 18.77
          - deviceName: "yandina_sensor"
            temperature:
              max:
                value: 36.4
                createdAt: "2021-01-26T04:06:31.000Z"
                deviceName: "yandina_sensor"
              min:
                value: 9.1
                createdAt: "2021-04-11T19:34:36.000Z"
                deviceName: "yandina_sensor"
              avg:
                value: 20.55228564716937
              median:
                value: 20.4

    batchWeatherInput:
      summary: An array of multiple weather readings input
      value:
        - {
            "deviceName": "woodford_sensor",
            "longitude": 152.77891,
            "latitude": -26.95064,
            "precipitation": 0.084,
            "temperature": 23.66,
            "atmosphericPressure": 280.54,
            "maxWindSpeed": 3.86,
            "solarRadiation": 280.12,
            "vaporPressure": 1.78,
            "humidity": 75.26,
            "windDirection": 163.23,
          }
        - {
            "deviceName": "noosa_sensor",
            "longitude": 153.08919,
            "latitude": -26.39676,
            "precipitation": 0.076,
            "temperature": 21.04,
            "atmosphericPressure": 131.55,
            "maxWindSpeed": 5.23,
            "solarRadiation": 128.12,
            "vaporPressure": 1.54,
            "humidity": 62.66,
            "windDirection": 171.86,
          }
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
